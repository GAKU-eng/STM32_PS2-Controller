
PS2_Contorol_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004648  08004648  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004648  08004648  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004648  08004648  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000210  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017aa  00000000  00000000  0002c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b22a  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd0b  00000000  00000000  00049d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f8d8  00000000  00000000  00055a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f534d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a90  00000000  00000000  000f53a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004570 	.word	0x08004570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004570 	.word	0x08004570

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	b09d      	sub	sp, #116	; 0x74
 8000284:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fcd3 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f9fd 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fadf 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 faad 	bl	80007f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000296:	f000 fa6d 	bl	8000774 <MX_SPI1_Init>
  MX_CAN_Init();
 800029a:	f000 fa35 	bl	8000708 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2110      	movs	r1, #16
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f001 f9e9 	bl	800167c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	48a4      	ldr	r0, [pc, #656]	; (8000540 <main+0x2c0>)
 80002b0:	f001 f9e4 	bl	800167c <HAL_GPIO_WritePin>

  HAL_CAN_Start(&hcan);
 80002b4:	48a3      	ldr	r0, [pc, #652]	; (8000544 <main+0x2c4>)
 80002b6:	f000 fe40 	bl	8000f3a <HAL_CAN_Start>

  TxData[0] = 0x00;
 80002ba:	4ba3      	ldr	r3, [pc, #652]	; (8000548 <main+0x2c8>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 80002c0:	4ba1      	ldr	r3, [pc, #644]	; (8000548 <main+0x2c8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 80002c6:	4ba0      	ldr	r3, [pc, #640]	; (8000548 <main+0x2c8>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x00;
 80002cc:	4b9e      	ldr	r3, [pc, #632]	; (8000548 <main+0x2c8>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x00;
 80002d2:	4b9d      	ldr	r3, [pc, #628]	; (8000548 <main+0x2c8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	711a      	strb	r2, [r3, #4]

  if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002d8:	489a      	ldr	r0, [pc, #616]	; (8000544 <main+0x2c4>)
 80002da:	f000 ff42 	bl	8001162 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d00f      	beq.n	8000304 <main+0x84>
	  TxHeader.StdId = 0x447;        //front ID
 80002e4:	4b99      	ldr	r3, [pc, #612]	; (800054c <main+0x2cc>)
 80002e6:	f240 4247 	movw	r2, #1095	; 0x447
 80002ea:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 80002ec:	4b97      	ldr	r3, [pc, #604]	; (800054c <main+0x2cc>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;
 80002f2:	4b96      	ldr	r3, [pc, #600]	; (800054c <main+0x2cc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 8;
 80002f8:	4b94      	ldr	r3, [pc, #592]	; (800054c <main+0x2cc>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80002fe:	4b93      	ldr	r3, [pc, #588]	; (800054c <main+0x2cc>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  }

  if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000304:	488f      	ldr	r0, [pc, #572]	; (8000544 <main+0x2c4>)
 8000306:	f000 ff2c 	bl	8001162 <HAL_CAN_GetTxMailboxesFreeLevel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00f      	beq.n	8000330 <main+0xb0>
	  TxHeader.StdId = 0x448;        //front ID
 8000310:	4b8e      	ldr	r3, [pc, #568]	; (800054c <main+0x2cc>)
 8000312:	f44f 6289 	mov.w	r2, #1096	; 0x448
 8000316:	601a      	str	r2, [r3, #0]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000318:	4b8c      	ldr	r3, [pc, #560]	; (800054c <main+0x2cc>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;
 800031e:	4b8b      	ldr	r3, [pc, #556]	; (800054c <main+0x2cc>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 8;
 8000324:	4b89      	ldr	r3, [pc, #548]	; (800054c <main+0x2cc>)
 8000326:	2208      	movs	r2, #8
 8000328:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = DISABLE;
 800032a:	4b88      	ldr	r3, [pc, #544]	; (800054c <main+0x2cc>)
 800032c:	2200      	movs	r2, #0
 800032e:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(16);
 8000330:	2010      	movs	r0, #16
 8000332:	f000 fce3 	bl	8000cfc <HAL_Delay>

	  /*PS2_contoroller_mask*/

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2110      	movs	r1, #16
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f001 f99d 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, CMD, val0, 5, 100);
 8000342:	2364      	movs	r3, #100	; 0x64
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2305      	movs	r3, #5
 8000348:	4a81      	ldr	r2, [pc, #516]	; (8000550 <main+0x2d0>)
 800034a:	4982      	ldr	r1, [pc, #520]	; (8000554 <main+0x2d4>)
 800034c:	4882      	ldr	r0, [pc, #520]	; (8000558 <main+0x2d8>)
 800034e:	f002 fcc4 	bl	8002cda <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2110      	movs	r1, #16
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f001 f98f 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_Delay(16);
 800035e:	2010      	movs	r0, #16
 8000360:	f000 fccc 	bl	8000cfc <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f001 f986 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, CMD_Mode, val1, 5, 100);
 8000370:	2364      	movs	r3, #100	; 0x64
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2305      	movs	r3, #5
 8000376:	4a79      	ldr	r2, [pc, #484]	; (800055c <main+0x2dc>)
 8000378:	4979      	ldr	r1, [pc, #484]	; (8000560 <main+0x2e0>)
 800037a:	4877      	ldr	r0, [pc, #476]	; (8000558 <main+0x2d8>)
 800037c:	f002 fcad 	bl	8002cda <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2110      	movs	r1, #16
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f001 f978 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_Delay(16);
 800038c:	2010      	movs	r0, #16
 800038e:	f000 fcb5 	bl	8000cfc <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2110      	movs	r1, #16
 8000396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039a:	f001 f96f 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, CMD_Read, val, 9, 100);
 800039e:	2364      	movs	r3, #100	; 0x64
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2309      	movs	r3, #9
 80003a4:	4a6f      	ldr	r2, [pc, #444]	; (8000564 <main+0x2e4>)
 80003a6:	4970      	ldr	r1, [pc, #448]	; (8000568 <main+0x2e8>)
 80003a8:	486b      	ldr	r0, [pc, #428]	; (8000558 <main+0x2d8>)
 80003aa:	f002 fc96 	bl	8002cda <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2110      	movs	r1, #16
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f001 f961 	bl	800167c <HAL_GPIO_WritePin>
	  HAL_Delay(16);
 80003ba:	2010      	movs	r0, #16
 80003bc:	f000 fc9e 	bl	8000cfc <HAL_Delay>

	  UP = val[3]>>4 & 00000001;
 80003c0:	4b68      	ldr	r3, [pc, #416]	; (8000564 <main+0x2e4>)
 80003c2:	78db      	ldrb	r3, [r3, #3]
 80003c4:	091b      	lsrs	r3, r3, #4
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	4a67      	ldr	r2, [pc, #412]	; (800056c <main+0x2ec>)
 80003ce:	6013      	str	r3, [r2, #0]
	  DOWN = val[3]>>6 & 00000001;
 80003d0:	4b64      	ldr	r3, [pc, #400]	; (8000564 <main+0x2e4>)
 80003d2:	78db      	ldrb	r3, [r3, #3]
 80003d4:	099b      	lsrs	r3, r3, #6
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	4a64      	ldr	r2, [pc, #400]	; (8000570 <main+0x2f0>)
 80003de:	6013      	str	r3, [r2, #0]
	  LEFT = val[3]>>7 & 00000001;
 80003e0:	4b60      	ldr	r3, [pc, #384]	; (8000564 <main+0x2e4>)
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	09db      	lsrs	r3, r3, #7
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	4a61      	ldr	r2, [pc, #388]	; (8000574 <main+0x2f4>)
 80003ee:	6013      	str	r3, [r2, #0]
	  RIGHT = val[3]>>5 & 00000001;
 80003f0:	4b5c      	ldr	r3, [pc, #368]	; (8000564 <main+0x2e4>)
 80003f2:	78db      	ldrb	r3, [r3, #3]
 80003f4:	095b      	lsrs	r3, r3, #5
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	4a5e      	ldr	r2, [pc, #376]	; (8000578 <main+0x2f8>)
 80003fe:	6013      	str	r3, [r2, #0]
	  Triangle = val[4]>>4 & 00000001;
 8000400:	4b58      	ldr	r3, [pc, #352]	; (8000564 <main+0x2e4>)
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	4a5b      	ldr	r2, [pc, #364]	; (800057c <main+0x2fc>)
 800040e:	6013      	str	r3, [r2, #0]
	  Round = val[4]>>5 & 00000001;
 8000410:	4b54      	ldr	r3, [pc, #336]	; (8000564 <main+0x2e4>)
 8000412:	791b      	ldrb	r3, [r3, #4]
 8000414:	095b      	lsrs	r3, r3, #5
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	4a58      	ldr	r2, [pc, #352]	; (8000580 <main+0x300>)
 800041e:	6013      	str	r3, [r2, #0]
	  Square = val[4]>>7 & 00000001;
 8000420:	4b50      	ldr	r3, [pc, #320]	; (8000564 <main+0x2e4>)
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	09db      	lsrs	r3, r3, #7
 8000426:	b2db      	uxtb	r3, r3
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	4a55      	ldr	r2, [pc, #340]	; (8000584 <main+0x304>)
 800042e:	6013      	str	r3, [r2, #0]
	  Cross = val[4]>>6 & 00000001;
 8000430:	4b4c      	ldr	r3, [pc, #304]	; (8000564 <main+0x2e4>)
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	099b      	lsrs	r3, r3, #6
 8000436:	b2db      	uxtb	r3, r3
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	4a52      	ldr	r2, [pc, #328]	; (8000588 <main+0x308>)
 800043e:	6013      	str	r3, [r2, #0]
	  L1 = val[4]>>2 & 00000001;
 8000440:	4b48      	ldr	r3, [pc, #288]	; (8000564 <main+0x2e4>)
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	089b      	lsrs	r3, r3, #2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	4a4f      	ldr	r2, [pc, #316]	; (800058c <main+0x30c>)
 800044e:	6013      	str	r3, [r2, #0]
	  L2 = val[4] & 00000001;
 8000450:	4b44      	ldr	r3, [pc, #272]	; (8000564 <main+0x2e4>)
 8000452:	791b      	ldrb	r3, [r3, #4]
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	4a4d      	ldr	r2, [pc, #308]	; (8000590 <main+0x310>)
 800045a:	6013      	str	r3, [r2, #0]
	  R1 = val[4]>>3 & 00000001;
 800045c:	4b41      	ldr	r3, [pc, #260]	; (8000564 <main+0x2e4>)
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	4a4a      	ldr	r2, [pc, #296]	; (8000594 <main+0x314>)
 800046a:	6013      	str	r3, [r2, #0]
	  R2 = val[4]>>1 & 00000001;
 800046c:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <main+0x2e4>)
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	085b      	lsrs	r3, r3, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	4a47      	ldr	r2, [pc, #284]	; (8000598 <main+0x318>)
 800047a:	6013      	str	r3, [r2, #0]
	  SELECT = val[3] & 00000001;
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <main+0x2e4>)
 800047e:	78db      	ldrb	r3, [r3, #3]
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	4a45      	ldr	r2, [pc, #276]	; (800059c <main+0x31c>)
 8000486:	6013      	str	r3, [r2, #0]
	  START = val[3]>>3 & 00000001;
 8000488:	4b36      	ldr	r3, [pc, #216]	; (8000564 <main+0x2e4>)
 800048a:	78db      	ldrb	r3, [r3, #3]
 800048c:	08db      	lsrs	r3, r3, #3
 800048e:	b2db      	uxtb	r3, r3
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	4a42      	ldr	r2, [pc, #264]	; (80005a0 <main+0x320>)
 8000496:	6013      	str	r3, [r2, #0]
	  LX = val[7];
 8000498:	4b32      	ldr	r3, [pc, #200]	; (8000564 <main+0x2e4>)
 800049a:	79db      	ldrb	r3, [r3, #7]
 800049c:	461a      	mov	r2, r3
 800049e:	4b41      	ldr	r3, [pc, #260]	; (80005a4 <main+0x324>)
 80004a0:	601a      	str	r2, [r3, #0]
	  LY = val[8];
 80004a2:	4b30      	ldr	r3, [pc, #192]	; (8000564 <main+0x2e4>)
 80004a4:	7a1b      	ldrb	r3, [r3, #8]
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <main+0x328>)
 80004aa:	601a      	str	r2, [r3, #0]
	  RX = val[5];
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <main+0x2e4>)
 80004ae:	795b      	ldrb	r3, [r3, #5]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <main+0x32c>)
 80004b4:	601a      	str	r2, [r3, #0]
	  RY = val[6];
 80004b6:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <main+0x2e4>)
 80004b8:	799b      	ldrb	r3, [r3, #6]
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <main+0x330>)
 80004be:	601a      	str	r2, [r3, #0]


	  TxData[0] = START;
 80004c0:	4b37      	ldr	r3, [pc, #220]	; (80005a0 <main+0x320>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <main+0x2c8>)
 80004c8:	701a      	strb	r2, [r3, #0]
	  TxData[1] = DOWN;
 80004ca:	4b29      	ldr	r3, [pc, #164]	; (8000570 <main+0x2f0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <main+0x2c8>)
 80004d2:	705a      	strb	r2, [r3, #1]
	  TxData[2] = LEFT;
 80004d4:	4b27      	ldr	r3, [pc, #156]	; (8000574 <main+0x2f4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <main+0x2c8>)
 80004dc:	709a      	strb	r2, [r3, #2]
	  TxData[3] = RIGHT;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <main+0x2f8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <main+0x2c8>)
 80004e6:	70da      	strb	r2, [r3, #3]
	  TxData[4] = Triangle;
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <main+0x2fc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <main+0x2c8>)
 80004f0:	711a      	strb	r2, [r3, #4]
	  TxData[5] = Round;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <main+0x300>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <main+0x2c8>)
 80004fa:	715a      	strb	r2, [r3, #5]
	  TxData[6] = Square;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <main+0x304>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <main+0x2c8>)
 8000504:	719a      	strb	r2, [r3, #6]
	  TxData[7] = Cross;
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <main+0x308>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <main+0x2c8>)
 800050e:	71da      	strb	r2, [r3, #7]

	  //CAN_Tx
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <main+0x334>)
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <main+0x2c8>)
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <main+0x2cc>)
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x2c4>)
 8000518:	f000 fd53 	bl	8000fc2 <HAL_CAN_AddTxMessage>


	  sprintf(stringdata,"%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\n",UP,DOWN,LEFT,RIGHT,Triangle,Round,Square,Cross,L1,L2,R1,R2,SELECT,START,LX,LY,RX,RY);
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x2ec>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <main+0x2f0>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	62b9      	str	r1, [r7, #40]	; 0x28
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <main+0x2f4>)
 800052a:	681d      	ldr	r5, [r3, #0]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <main+0x2f8>)
 800052e:	681e      	ldr	r6, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x2fc>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	6278      	str	r0, [r7, #36]	; 0x24
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x300>)
 8000538:	681c      	ldr	r4, [r3, #0]
 800053a:	623c      	str	r4, [r7, #32]
 800053c:	e03c      	b.n	80005b8 <main+0x338>
 800053e:	bf00      	nop
 8000540:	48000400 	.word	0x48000400
 8000544:	2000008c 	.word	0x2000008c
 8000548:	20000260 	.word	0x20000260
 800054c:	20000244 	.word	0x20000244
 8000550:	200001ac 	.word	0x200001ac
 8000554:	080045c0 	.word	0x080045c0
 8000558:	200000b4 	.word	0x200000b4
 800055c:	200001b4 	.word	0x200001b4
 8000560:	080045c8 	.word	0x080045c8
 8000564:	200001a0 	.word	0x200001a0
 8000568:	080045d0 	.word	0x080045d0
 800056c:	200001bc 	.word	0x200001bc
 8000570:	200001c0 	.word	0x200001c0
 8000574:	200001c4 	.word	0x200001c4
 8000578:	200001c8 	.word	0x200001c8
 800057c:	200001cc 	.word	0x200001cc
 8000580:	200001d0 	.word	0x200001d0
 8000584:	200001d4 	.word	0x200001d4
 8000588:	200001d8 	.word	0x200001d8
 800058c:	200001dc 	.word	0x200001dc
 8000590:	200001e0 	.word	0x200001e0
 8000594:	200001e4 	.word	0x200001e4
 8000598:	200001e8 	.word	0x200001e8
 800059c:	200001ec 	.word	0x200001ec
 80005a0:	200001f0 	.word	0x200001f0
 80005a4:	200001f4 	.word	0x200001f4
 80005a8:	200001f8 	.word	0x200001f8
 80005ac:	200001fc 	.word	0x200001fc
 80005b0:	20000200 	.word	0x20000200
 80005b4:	2000025c 	.word	0x2000025c
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <main+0x3cc>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	61fa      	str	r2, [r7, #28]
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <main+0x3d0>)
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	61b9      	str	r1, [r7, #24]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <main+0x3d4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <main+0x3d8>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	6138      	str	r0, [r7, #16]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0x3dc>)
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	60fc      	str	r4, [r7, #12]
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0x3e0>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x3e4>)
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	6079      	str	r1, [r7, #4]
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0x3e8>)
 80005e4:	681c      	ldr	r4, [r3, #0]
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <main+0x3ec>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <main+0x3f0>)
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <main+0x3f4>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <main+0x3f8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80005f8:	920e      	str	r2, [sp, #56]	; 0x38
 80005fa:	910d      	str	r1, [sp, #52]	; 0x34
 80005fc:	900c      	str	r0, [sp, #48]	; 0x30
 80005fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	910a      	str	r1, [sp, #40]	; 0x28
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	9209      	str	r2, [sp, #36]	; 0x24
 8000608:	68fc      	ldr	r4, [r7, #12]
 800060a:	9408      	str	r4, [sp, #32]
 800060c:	6938      	ldr	r0, [r7, #16]
 800060e:	9007      	str	r0, [sp, #28]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	9306      	str	r3, [sp, #24]
 8000614:	69b9      	ldr	r1, [r7, #24]
 8000616:	9105      	str	r1, [sp, #20]
 8000618:	69fa      	ldr	r2, [r7, #28]
 800061a:	9204      	str	r2, [sp, #16]
 800061c:	6a3c      	ldr	r4, [r7, #32]
 800061e:	9403      	str	r4, [sp, #12]
 8000620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000622:	9002      	str	r0, [sp, #8]
 8000624:	9601      	str	r6, [sp, #4]
 8000626:	9500      	str	r5, [sp, #0]
 8000628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800062c:	4913      	ldr	r1, [pc, #76]	; (800067c <main+0x3fc>)
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <main+0x400>)
 8000630:	f003 fb30 	bl	8003c94 <siprintf>
	  HAL_UART_Transmit(&huart2,stringdata,strlen((char*)stringdata),10);
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0x400>)
 8000636:	f7ff fdcb 	bl	80001d0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	230a      	movs	r3, #10
 8000640:	490f      	ldr	r1, [pc, #60]	; (8000680 <main+0x400>)
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <main+0x404>)
 8000644:	f002 ff1e 	bl	8003484 <HAL_UART_Transmit>
	  HAL_Delay(16);
 8000648:	e672      	b.n	8000330 <main+0xb0>
 800064a:	bf00      	nop
 800064c:	200001d4 	.word	0x200001d4
 8000650:	200001d8 	.word	0x200001d8
 8000654:	200001dc 	.word	0x200001dc
 8000658:	200001e0 	.word	0x200001e0
 800065c:	200001e4 	.word	0x200001e4
 8000660:	200001e8 	.word	0x200001e8
 8000664:	200001ec 	.word	0x200001ec
 8000668:	200001f0 	.word	0x200001f0
 800066c:	200001f4 	.word	0x200001f4
 8000670:	200001f8 	.word	0x200001f8
 8000674:	200001fc 	.word	0x200001fc
 8000678:	20000200 	.word	0x20000200
 800067c:	08004588 	.word	0x08004588
 8000680:	20000204 	.word	0x20000204
 8000684:	20000118 	.word	0x20000118

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b090      	sub	sp, #64	; 0x40
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2228      	movs	r2, #40	; 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 faf4 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	2301      	movs	r3, #1
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2310      	movs	r3, #16
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 ffef 	bl	80016ac <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006d4:	f000 f91c 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006e0:	2390      	movs	r3, #144	; 0x90
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f819 	bl	8002728 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006fc:	f000 f908 	bl	8000910 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3740      	adds	r7, #64	; 0x40
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_CAN_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_CAN_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_CAN_Init+0x64>)
 8000714:	2206      	movs	r2, #6
 8000716:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_CAN_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_CAN_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_CAN_Init+0x64>)
 8000726:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800072a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_CAN_Init+0x64>)
 800072e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000732:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CAN_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CAN_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CAN_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CAN_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CAN_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CAN_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CAN_Init+0x64>)
 800075a:	f000 faf3 	bl	8000d44 <HAL_CAN_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f8d4 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000008c 	.word	0x2000008c
 8000770:	40006400 	.word	0x40006400

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_SPI1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_SPI1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI1_Init+0x74>)
 800078e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000792:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000796:	2202      	movs	r2, #2
 8000798:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_SPI1_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007aa:	2238      	movs	r2, #56	; 0x38
 80007ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007d4:	f002 f9de 	bl	8002b94 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f897 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000b4 	.word	0x200000b4
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART2_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART2_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x58>)
 8000834:	f002 fdd8 	bl	80033e8 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f867 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000118 	.word	0x20000118
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a27      	ldr	r2, [pc, #156]	; (8000908 <MX_GPIO_Init+0xb8>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xb8>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xb8>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_GPIO_Init+0xb8>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0xb8>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fee1 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_GPIO_Init+0xbc>)
 80008c0:	f000 fedc 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008c4:	2310      	movs	r3, #16
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f000 fd5b 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008e2:	2320      	movs	r3, #32
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xbc>)
 80008fa:	f000 fd4d 	bl	8001398 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	48000400 	.word	0x48000400

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <HAL_CAN_MspInit+0x80>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d129      	bne.n	80009da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 800098c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_CAN_MspInit+0x84>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80009c8:	2309      	movs	r3, #9
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f000 fcdf 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40006400 	.word	0x40006400
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_SPI_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d128      	bne.n	8000a60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a18:	6193      	str	r3, [r2, #24]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_SPI_MspInit+0x80>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3e:	23e0      	movs	r3, #224	; 0xe0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fc9c 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x80>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d129      	bne.n	8000ae6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ac2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fc59 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8ba 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f003 f858 	bl	8003c30 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20003000 	.word	0x20003000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	20000268 	.word	0x20000268
 8000bb4:	20000280 	.word	0x20000280

08000bb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f003 f817 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fb37 	bl	8000280 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c14:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c20:	08004650 	.word	0x08004650
  ldr r2, =_sbss
 8000c24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c28:	20000280 	.word	0x20000280

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x28>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 fb75 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe66 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fb7f 	bl	800137e <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 fb55 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	2000026c 	.word	0x2000026c

08000ce4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000026c 	.word	0x2000026c

08000cfc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0ed      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fdfe 	bl	8000964 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d78:	f7ff ffb4 	bl	8000ce4 <HAL_GetTick>
 8000d7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7e:	e012      	b.n	8000da6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d80:	f7ff ffb0 	bl	8000ce4 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d90b      	bls.n	8000da6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0c5      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0e5      	beq.n	8000d80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0202 	bic.w	r2, r2, #2
 8000dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc4:	f7ff ff8e 	bl	8000ce4 <HAL_GetTick>
 8000dc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dca:	e012      	b.n	8000df2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dcc:	f7ff ff8a 	bl	8000ce4 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b0a      	cmp	r3, #10
 8000dd8:	d90b      	bls.n	8000df2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2205      	movs	r2, #5
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e09f      	b.n	8000f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1e5      	bne.n	8000dcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d108      	bne.n	8000e1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7e5b      	ldrb	r3, [r3, #25]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d108      	bne.n	8000e44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7e9b      	ldrb	r3, [r3, #26]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d108      	bne.n	8000e6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0220 	orr.w	r2, r2, #32
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e007      	b.n	8000e7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0220 	bic.w	r2, r2, #32
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7edb      	ldrb	r3, [r3, #27]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d108      	bne.n	8000e98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0210 	bic.w	r2, r2, #16
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e007      	b.n	8000ea8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0210 	orr.w	r2, r2, #16
 8000ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1b      	ldrb	r3, [r3, #28]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0208 	orr.w	r2, r2, #8
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0208 	bic.w	r2, r2, #8
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7f5b      	ldrb	r3, [r3, #29]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d108      	bne.n	8000eec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0204 	orr.w	r2, r2, #4
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e007      	b.n	8000efc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0204 	bic.w	r2, r2, #4
 8000efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	ea42 0103 	orr.w	r1, r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12e      	bne.n	8000fac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2202      	movs	r2, #2
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f66:	f7ff febd 	bl	8000ce4 <HAL_GetTick>
 8000f6a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f6c:	e012      	b.n	8000f94 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f6e:	f7ff feb9 	bl	8000ce4 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b0a      	cmp	r3, #10
 8000f7a:	d90b      	bls.n	8000f94 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e012      	b.n	8000fba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1e5      	bne.n	8000f6e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e006      	b.n	8000fba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
  }
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b089      	sub	sp, #36	; 0x24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <HAL_CAN_AddTxMessage+0x2c>
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	f040 80ad 	bne.w	8001148 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10a      	bne.n	800100e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8095 	beq.w	8001138 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	0e1b      	lsrs	r3, r3, #24
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001018:	2201      	movs	r2, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	409a      	lsls	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10d      	bne.n	8001046 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001034:	68f9      	ldr	r1, [r7, #12]
 8001036:	6809      	ldr	r1, [r1, #0]
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3318      	adds	r3, #24
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	440b      	add	r3, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e00f      	b.n	8001066 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001050:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800105a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3318      	adds	r3, #24
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	440b      	add	r3, r1
 8001064:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3318      	adds	r3, #24
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	440b      	add	r3, r1
 8001076:	3304      	adds	r3, #4
 8001078:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	7d1b      	ldrb	r3, [r3, #20]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d111      	bne.n	80010a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	6811      	ldr	r1, [r2, #0]
 8001096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3318      	adds	r3, #24
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	440b      	add	r3, r1
 80010a2:	3304      	adds	r3, #4
 80010a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3307      	adds	r3, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	061a      	lsls	r2, r3, #24
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3306      	adds	r3, #6
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3305      	adds	r3, #5
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	4313      	orrs	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	3204      	adds	r2, #4
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	4610      	mov	r0, r2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	6811      	ldr	r1, [r2, #0]
 80010ce:	ea43 0200 	orr.w	r2, r3, r0
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3303      	adds	r3, #3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	061a      	lsls	r2, r3, #24
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3302      	adds	r3, #2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	4313      	orrs	r3, r2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	4610      	mov	r0, r2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	6811      	ldr	r1, [r2, #0]
 8001104:	ea43 0200 	orr.w	r2, r3, r0
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	440b      	add	r3, r1
 800110e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001112:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3318      	adds	r3, #24
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6811      	ldr	r1, [r2, #0]
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3318      	adds	r3, #24
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	440b      	add	r3, r1
 8001132:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	e00e      	b.n	8001156 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e006      	b.n	8001156 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
  }
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001174:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d002      	beq.n	8001182 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d11d      	bne.n	80011be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff47 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5c 	bl	8001214 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e14e      	b.n	8001646 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8140 	beq.w	8001640 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x40>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 809a 	beq.w	8001640 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a54      	ldr	r2, [pc, #336]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_GPIO_Init+0x2cc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a46      	ldr	r2, [pc, #280]	; (800166c <HAL_GPIO_Init+0x2d4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <HAL_GPIO_Init+0x2d8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1d8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_GPIO_Init+0x2dc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1d4>
 8001568:	2303      	movs	r3, #3
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 800156c:	2305      	movs	r3, #5
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x2d0>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015bc:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_GPIO_Init+0x2e0>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f aea9 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f001 b823 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 817d 	beq.w	80019e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e8:	4bbc      	ldr	r3, [pc, #752]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f4:	4bb9      	ldr	r3, [pc, #740]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d15c      	bne.n	80017ba <HAL_RCC_OscConfig+0x10e>
 8001700:	4bb6      	ldr	r3, [pc, #728]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d155      	bne.n	80017ba <HAL_RCC_OscConfig+0x10e>
 800170e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001712:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001722:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d102      	bne.n	8001740 <HAL_RCC_OscConfig+0x94>
 800173a:	4ba8      	ldr	r3, [pc, #672]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e015      	b.n	800176c <HAL_RCC_OscConfig+0xc0>
 8001740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001744:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001758:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800175c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001768:	4b9c      	ldr	r3, [pc, #624]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001770:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001774:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001780:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f002 021f 	and.w	r2, r2, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 811f 	beq.w	80019e0 <HAL_RCC_OscConfig+0x334>
 80017a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8116 	bne.w	80019e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f000 bfaf 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x12e>
 80017cc:	4b83      	ldr	r3, [pc, #524]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a82      	ldr	r2, [pc, #520]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e036      	b.n	8001848 <HAL_RCC_OscConfig+0x19c>
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x158>
 80017ea:	4b7c      	ldr	r3, [pc, #496]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7b      	ldr	r2, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a78      	ldr	r2, [pc, #480]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80017fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e021      	b.n	8001848 <HAL_RCC_OscConfig+0x19c>
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x184>
 8001816:	4b71      	ldr	r3, [pc, #452]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a70      	ldr	r2, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6e      	ldr	r3, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6d      	ldr	r2, [pc, #436]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x19c>
 8001830:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a69      	ldr	r2, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001848:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f023 020f 	bic.w	r2, r3, #15
 8001850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	495f      	ldr	r1, [pc, #380]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 800185e:	4313      	orrs	r3, r2
 8001860:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d059      	beq.n	8001926 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fa37 	bl	8000ce4 <HAL_GetTick>
 8001876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fa32 	bl	8000ce4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d902      	bls.n	8001892 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	f000 bf43 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001896:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_OscConfig+0x218>
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e015      	b.n	80018f0 <HAL_RCC_OscConfig+0x244>
 80018c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018fc:	fa92 f2a2 	rbit	r2, r2
 8001900:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001904:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001908:	fab2 f282 	clz	r2, r2
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f042 0220 	orr.w	r2, r2, #32
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f002 021f 	and.w	r2, r2, #31
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ab      	beq.n	800187c <HAL_RCC_OscConfig+0x1d0>
 8001924:	e05d      	b.n	80019e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f9dd 	bl	8000ce4 <HAL_GetTick>
 800192a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f9d8 	bl	8000ce4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b64      	cmp	r3, #100	; 0x64
 800193e:	d902      	bls.n	8001946 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	f000 bee9 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800195a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0x2cc>
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e015      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f8>
 8001978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800197c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800198c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001990:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001994:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_RCC_OscConfig+0x330>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019b0:	fa92 f2a2 	rbit	r2, r2
 80019b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ab      	bne.n	8001930 <HAL_RCC_OscConfig+0x284>
 80019d8:	e003      	b.n	80019e2 <HAL_RCC_OscConfig+0x336>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 817d 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019f8:	4ba6      	ldr	r3, [pc, #664]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a04:	4ba3      	ldr	r3, [pc, #652]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d172      	bne.n	8001af6 <HAL_RCC_OscConfig+0x44a>
 8001a10:	4ba0      	ldr	r3, [pc, #640]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d16c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x44a>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x3a0>
 8001a46:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a70:	4b88      	ldr	r3, [pc, #544]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2202      	movs	r2, #2
 8001a76:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a7e:	fa92 f2a2 	rbit	r2, r2
 8001a82:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a86:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	f042 0220 	orr.w	r2, r2, #32
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_RCC_OscConfig+0x410>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f000 be2e 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	21f8      	movs	r1, #248	; 0xf8
 8001ad2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ada:	fa91 f1a1 	rbit	r1, r1
 8001ade:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ae2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ae6:	fab1 f181 	clz	r1, r1
 8001aea:	b2c9      	uxtb	r1, r1
 8001aec:	408b      	lsls	r3, r1
 8001aee:	4969      	ldr	r1, [pc, #420]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af4:	e0fd      	b.n	8001cf2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8088 	beq.w	8001c18 <HAL_RCC_OscConfig+0x56c>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2301      	movs	r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8d6 	bl	8000ce4 <HAL_GetTick>
 8001b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f8d1 	bl	8000ce4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d902      	bls.n	8001b54 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	f000 bde2 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d8>
 8001b7e:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x500>
 8001b84:	2302      	movs	r3, #2
 8001b86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	2202      	movs	r2, #2
 8001bae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bb6:	fa92 f2a2 	rbit	r2, r2
 8001bba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f042 0220 	orr.w	r2, r2, #32
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f002 021f 	and.w	r2, r2, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0af      	beq.n	8001b3e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	21f8      	movs	r1, #248	; 0xf8
 8001bf4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bfc:	fa91 f1a1 	rbit	r1, r1
 8001c00:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c04:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c08:	fab1 f181 	clz	r1, r1
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	408b      	lsls	r3, r1
 8001c10:	4920      	ldr	r1, [pc, #128]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
 8001c16:	e06c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x646>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f84e 	bl	8000ce4 <HAL_GetTick>
 8001c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f849 	bl	8000ce4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d902      	bls.n	8001c64 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f000 bd5a 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d104      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5ec>
 8001c8e:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <HAL_RCC_OscConfig+0x5e8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e015      	b.n	8001cc0 <HAL_RCC_OscConfig+0x614>
 8001c94:	40021000 	.word	0x40021000
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cbc:	4bc8      	ldr	r3, [pc, #800]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cca:	fa92 f2a2 	rbit	r2, r2
 8001cce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001cd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cd6:	fab2 f282 	clz	r2, r2
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f042 0220 	orr.w	r2, r2, #32
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f002 021f 	and.w	r2, r2, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ad      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8110 	beq.w	8001f28 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d079      	beq.n	8001e0c <HAL_RCC_OscConfig+0x760>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4bab      	ldr	r3, [pc, #684]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2301      	movs	r3, #1
 8001d40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7fe ffcf 	bl	8000ce4 <HAL_GetTick>
 8001d46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ffca 	bl	8000ce4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f000 bcdb 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001da0:	2202      	movs	r2, #2
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dc8:	2102      	movs	r1, #2
 8001dca:	6019      	str	r1, [r3, #0]
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f1a3 	rbit	r1, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001de2:	6019      	str	r1, [r3, #0]
  return result;
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0a0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x6a0>
 8001e0a:	e08d      	b.n	8001f28 <HAL_RCC_OscConfig+0x87c>
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e2e:	601a      	str	r2, [r3, #0]
  return result;
 8001e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x938>)
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff49 	bl	8000ce4 <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7fe ff44 	bl	8000ce4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d902      	bls.n	8001e6e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f000 bc55 	b.w	8002718 <HAL_RCC_OscConfig+0x106c>
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ed8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	6019      	str	r1, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f1a3 	rbit	r1, r3
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f00:	6019      	str	r1, [r3, #0]
  return result;
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d197      	bne.n	8001e58 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 81a1 	beq.w	8002280 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d116      	bne.n	8001f7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	61d3      	str	r3, [r2, #28]
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001f76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x93c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x93c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x93c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fea5 	bl	8000ce4 <HAL_GetTick>
 8001f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fea0 	bl	8000ce4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	; 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e3b1      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_RCC_OscConfig+0x93c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10d      	bne.n	8001fec <HAL_RCC_OscConfig+0x940>
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a02      	ldr	r2, [pc, #8]	; (8001fe0 <HAL_RCC_OscConfig+0x934>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e03c      	b.n	8002058 <HAL_RCC_OscConfig+0x9ac>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	10908120 	.word	0x10908120
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x96a>
 8001ffc:	4bc1      	ldr	r3, [pc, #772]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4ac0      	ldr	r2, [pc, #768]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	4bbe      	ldr	r3, [pc, #760]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4abd      	ldr	r2, [pc, #756]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e020      	b.n	8002058 <HAL_RCC_OscConfig+0x9ac>
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x994>
 8002026:	4bb7      	ldr	r3, [pc, #732]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4ab6      	ldr	r2, [pc, #728]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4bb4      	ldr	r3, [pc, #720]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4ab3      	ldr	r2, [pc, #716]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0x9ac>
 8002040:	4bb0      	ldr	r3, [pc, #704]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4aaf      	ldr	r2, [pc, #700]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4bad      	ldr	r3, [pc, #692]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4aac      	ldr	r2, [pc, #688]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002052:	f023 0304 	bic.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8081 	beq.w	800216c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fe3b 	bl	8000ce4 <HAL_GetTick>
 800206e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fe36 	bl	8000ce4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e345      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020d2:	601a      	str	r2, [r3, #0]
  return result;
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0xa4c>
 80020f2:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0xa74>
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4b79      	ldr	r3, [pc, #484]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002124:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002128:	2102      	movs	r1, #2
 800212a:	6011      	str	r1, [r2, #0]
 800212c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002130:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	fa92 f1a2 	rbit	r1, r2
 800213a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800213e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002142:	6011      	str	r1, [r2, #0]
  return result;
 8002144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002148:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d084      	beq.n	8002074 <HAL_RCC_OscConfig+0x9c8>
 800216a:	e07f      	b.n	800226c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fdba 	bl	8000ce4 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fdb5 	bl	8000ce4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e2c4      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021d4:	601a      	str	r2, [r3, #0]
  return result;
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80021de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0xb4e>
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	e013      	b.n	8002222 <HAL_RCC_OscConfig+0xb76>
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002226:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800222a:	2102      	movs	r1, #2
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002232:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	fa92 f1a2 	rbit	r1, r2
 800223c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002240:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002244:	6011      	str	r1, [r2, #0]
  return result;
 8002246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f002 021f 	and.w	r2, r2, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d184      	bne.n	8002176 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800226c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8242 	beq.w	8002716 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_RCC_OscConfig+0xc58>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	f000 8213 	beq.w	80026c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	f040 8162 	bne.w	8002576 <HAL_RCC_OscConfig+0xeca>
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022d6:	601a      	str	r2, [r3, #0]
  return result;
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fcf4 	bl	8000ce4 <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e00c      	b.n	800231c <HAL_RCC_OscConfig+0xc70>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fcec 	bl	8000ce4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1fd      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002340:	601a      	str	r2, [r3, #0]
  return result;
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800234a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <HAL_RCC_OscConfig+0xcba>
 8002360:	4bb0      	ldr	r3, [pc, #704]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e027      	b.n	80023b6 <HAL_RCC_OscConfig+0xd0a>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800236e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	4b9c      	ldr	r3, [pc, #624]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fa92 f1a2 	rbit	r1, r2
 80023d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023da:	6011      	str	r1, [r2, #0]
  return result;
 80023dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d182      	bne.n	8002308 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	430b      	orrs	r3, r1
 8002424:	497f      	ldr	r1, [pc, #508]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800244e:	601a      	str	r2, [r3, #0]
  return result;
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002458:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fc38 	bl	8000ce4 <HAL_GetTick>
 8002474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002478:	e009      	b.n	800248e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fc33 	bl	8000ce4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e144      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024b2:	601a      	str	r2, [r3, #0]
  return result;
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe2c>
 80024d2:	4b54      	ldr	r3, [pc, #336]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e027      	b.n	8002528 <HAL_RCC_OscConfig+0xe7c>
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002534:	6011      	str	r1, [r2, #0]
 8002536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	fa92 f1a2 	rbit	r1, r2
 8002544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002548:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800254c:	6011      	str	r1, [r2, #0]
  return result;
 800254e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002552:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d082      	beq.n	800247a <HAL_RCC_OscConfig+0xdce>
 8002574:	e0cf      	b.n	8002716 <HAL_RCC_OscConfig+0x106a>
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800257e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800259a:	601a      	str	r2, [r3, #0]
  return result;
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	2300      	movs	r3, #0
 80025ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fb92 	bl	8000ce4 <HAL_GetTick>
 80025c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e009      	b.n	80025da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fb8d 	bl	8000ce4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e09e      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80025fe:	601a      	str	r2, [r3, #0]
  return result;
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002608:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d104      	bne.n	8002628 <HAL_RCC_OscConfig+0xf7c>
 800261e:	4b01      	ldr	r3, [pc, #4]	; (8002624 <HAL_RCC_OscConfig+0xf78>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	e029      	b.n	8002678 <HAL_RCC_OscConfig+0xfcc>
 8002624:	40021000 	.word	0x40021000
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_RCC_OscConfig+0x1078>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002680:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002684:	6011      	str	r1, [r2, #0]
 8002686:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800268a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	fa92 f1a2 	rbit	r1, r2
 8002694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002698:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800269c:	6011      	str	r1, [r2, #0]
  return result;
 800269e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f042 0220 	orr.w	r2, r2, #32
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	f002 021f 	and.w	r2, r2, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d180      	bne.n	80025c6 <HAL_RCC_OscConfig+0xf1a>
 80026c4:	e027      	b.n	8002716 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e01e      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_OscConfig+0x1078>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b09e      	sub	sp, #120	; 0x78
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e162      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b90      	ldr	r3, [pc, #576]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	498b      	ldr	r1, [pc, #556]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e14a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	497f      	ldr	r1, [pc, #508]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80dc 	beq.w	8002954 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d13c      	bne.n	800281e <HAL_RCC_ClockConfig+0xf6>
 80027a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_ClockConfig+0xa6>
 80027c8:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e00f      	b.n	80027ee <HAL_RCC_ClockConfig+0xc6>
 80027ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
 80027dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e0:	663b      	str	r3, [r7, #96]	; 0x60
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027f6:	fa92 f2a2 	rbit	r2, r2
 80027fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d17b      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0f3      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d13c      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x178>
 8002826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_ClockConfig+0x128>
 800284a:	4b4f      	ldr	r3, [pc, #316]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e00f      	b.n	8002870 <HAL_RCC_ClockConfig+0x148>
 8002850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	643b      	str	r3, [r7, #64]	; 0x40
 8002864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002874:	63ba      	str	r2, [r7, #56]	; 0x38
 8002876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002878:	fa92 f2a2 	rbit	r2, r2
 800287c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800287e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d13a      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b2      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
 80028a0:	2302      	movs	r3, #2
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x1a0>
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e00d      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1bc>
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2202      	movs	r2, #2
 80028e6:	61ba      	str	r2, [r7, #24]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	fa92 f2a2 	rbit	r2, r2
 80028ee:	617a      	str	r2, [r7, #20]
  return result;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	fab2 f282 	clz	r2, r2
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f042 0220 	orr.w	r2, r2, #32
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e079      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	491a      	ldr	r1, [pc, #104]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe f9de 	bl	8000ce4 <HAL_GetTick>
 8002928:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe f9da 	bl	8000ce4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e061      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_ClockConfig+0x260>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d214      	bcs.n	800298c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e040      	b.n	8002a06 <HAL_RCC_ClockConfig+0x2de>
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	491a      	ldr	r1, [pc, #104]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4912      	ldr	r1, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ca:	f000 f829 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029ce:	4601      	mov	r1, r0
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_ClockConfig+0x2e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	22f0      	movs	r2, #240	; 0xf0
 80029da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	60fa      	str	r2, [r7, #12]
  return result;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	40d3      	lsrs	r3, r2
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x2ec>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	fa21 f303 	lsr.w	r3, r1, r3
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_RCC_ClockConfig+0x2f0>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCC_ClockConfig+0x2f4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f92c 	bl	8000c5c <HAL_InitTick>
  
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3778      	adds	r7, #120	; 0x78
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	080045dc 	.word	0x080045dc
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x36>
 8002a4e:	e03c      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a52:	623b      	str	r3, [r7, #32]
      break;
 8002a54:	e03c      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	fa92 f2a2 	rbit	r2, r2
 8002a68:	607a      	str	r2, [r7, #4]
  return result;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	40d3      	lsrs	r3, r2
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	220f      	movs	r2, #15
 8002a84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab8:	e004      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002acc:	623b      	str	r3, [r7, #32]
      break;
 8002ace:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	372c      	adds	r7, #44	; 0x2c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	080045f4 	.word	0x080045f4
 8002aec:	08004604 	.word	0x08004604
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b12:	f7ff ffef 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	603a      	str	r2, [r7, #0]
  return result;
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	40d3      	lsrs	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	080045ec 	.word	0x080045ec

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b56:	f7ff ffcd 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	603a      	str	r2, [r7, #0]
  return result;
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	40d3      	lsrs	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	080045ec 	.word	0x080045ec

08002b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e095      	b.n	8002cd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb6:	d009      	beq.n	8002bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
 8002bbe:	e005      	b.n	8002bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fd ff00 	bl	80009ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c0c:	d902      	bls.n	8002c14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e002      	b.n	8002c1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c22:	d007      	beq.n	8002c34 <HAL_SPI_Init+0xa0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	ea42 0103 	orr.w	r1, r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 0204 	and.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x26>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e20a      	b.n	8003116 <HAL_SPI_TransmitReceive+0x43c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d08:	f7fd ffec 	bl	8000ce4 <HAL_GetTick>
 8002d0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d24:	7efb      	ldrb	r3, [r7, #27]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d00e      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x6e>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d30:	d106      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x66>
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d003      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d46:	e1e0      	b.n	800310a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_SPI_TransmitReceive+0x80>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_TransmitReceive+0x80>
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d60:	e1d3      	b.n	800310a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d003      	beq.n	8002d76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	887a      	ldrh	r2, [r7, #2]
 8002d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db8:	d802      	bhi.n	8002dc0 <HAL_SPI_TransmitReceive+0xe6>
 8002dba:	8a3b      	ldrh	r3, [r7, #16]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d908      	bls.n	8002dd2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	e007      	b.n	8002de2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e08:	f240 8081 	bls.w	8002f0e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x140>
 8002e14:	8a7b      	ldrh	r3, [r7, #18]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d16d      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3e:	e05a      	b.n	8002ef6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d11b      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x1ac>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d016      	beq.n	8002e86 <HAL_SPI_TransmitReceive+0x1ac>
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d113      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	1c9a      	adds	r2, r3, #2
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d11c      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x1f4>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	b292      	uxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ece:	f7fd ff09 	bl	8000ce4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d80b      	bhi.n	8002ef6 <HAL_SPI_TransmitReceive+0x21c>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d007      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002ef4:	e109      	b.n	800310a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d19f      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x166>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d199      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x166>
 8002f0c:	e0e3      	b.n	80030d6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x244>
 8002f16:	8a7b      	ldrh	r3, [r7, #18]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 80cf 	bne.w	80030bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d912      	bls.n	8002f4e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b02      	subs	r3, #2
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f4c:	e0b6      	b.n	80030bc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f74:	e0a2      	b.n	80030bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d134      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x314>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02f      	beq.n	8002fee <HAL_SPI_TransmitReceive+0x314>
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d12c      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d912      	bls.n	8002fc4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b02      	subs	r3, #2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc2:	e012      	b.n	8002fea <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d148      	bne.n	800308e <HAL_SPI_TransmitReceive+0x3b4>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d042      	beq.n	800308e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d923      	bls.n	800305c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	b292      	uxth	r2, r2
 8003020:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b02      	subs	r3, #2
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d81f      	bhi.n	800308a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	e016      	b.n	800308a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f103 020c 	add.w	r2, r3, #12
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800308e:	f7fd fe29 	bl	8000ce4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309a:	429a      	cmp	r2, r3
 800309c:	d803      	bhi.n	80030a6 <HAL_SPI_TransmitReceive+0x3cc>
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d102      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x3d2>
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80030ba:	e026      	b.n	800310a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f af57 	bne.w	8002f76 <HAL_SPI_TransmitReceive+0x29c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f af50 	bne.w	8002f76 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f93e 	bl	800335c <SPI_EndRxTxTransaction>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003100:	e003      	b.n	800310a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003116:	4618      	mov	r0, r3
 8003118:	3728      	adds	r7, #40	; 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003130:	f7fd fdd8 	bl	8000ce4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003140:	f7fd fdd0 	bl	8000ce4 <HAL_GetTick>
 8003144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	015b      	lsls	r3, r3, #5
 800314c:	0d1b      	lsrs	r3, r3, #20
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003156:	e054      	b.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d050      	beq.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003160:	f7fd fdc0 	bl	8000ce4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	429a      	cmp	r2, r3
 800316e:	d902      	bls.n	8003176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13d      	bne.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318e:	d111      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	d004      	beq.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d107      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d10f      	bne.n	80031de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e017      	b.n	8003222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3b01      	subs	r3, #1
 8003200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d19b      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003242:	f7fd fd4f 	bl	8000ce4 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003252:	f7fd fd47 	bl	8000ce4 <HAL_GetTick>
 8003256:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00da      	lsls	r2, r3, #3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	0d1b      	lsrs	r3, r3, #20
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003278:	e060      	b.n	800333c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003280:	d107      	bne.n	8003292 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003290:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d050      	beq.n	800333c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800329a:	f7fd fd23 	bl	8000ce4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d902      	bls.n	80032b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d13d      	bne.n	800332c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c8:	d111      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d2:	d004      	beq.n	80032de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d107      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f6:	d10f      	bne.n	8003318 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003316:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e010      	b.n	800334e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3b01      	subs	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d196      	bne.n	800327a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000

0800335c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff ff5b 	bl	8003230 <SPI_WaitFifoStateUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e027      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff fec0 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e014      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff ff34 	bl	8003230 <SPI_WaitFifoStateUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e000      	b.n	80033e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fb30 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b6 	bl	8003598 <UART_SetConfig>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9e0 	bl	8003804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fa67 	bl	8003948 <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	2b20      	cmp	r3, #32
 800349a:	d178      	bne.n	800358e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e071      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fc13 	bl	8000ce4 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x68>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f4:	e030      	b.n	8003558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fac9 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03c      	b.n	8003590 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	b292      	uxth	r2, r2
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3302      	adds	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e008      	b.n	8003546 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b292      	uxth	r2, r2
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c8      	bne.n	80034f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fa92 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e005      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8a      	ldr	r3, [pc, #552]	; (80037ec <UART_SetConfig+0x254>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a78      	ldr	r2, [pc, #480]	; (80037f0 <UART_SetConfig+0x258>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d120      	bne.n	8003656 <UART_SetConfig+0xbe>
 8003614:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <UART_SetConfig+0x25c>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d817      	bhi.n	8003650 <UART_SetConfig+0xb8>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x90>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003639 	.word	0x08003639
 800362c:	08003645 	.word	0x08003645
 8003630:	0800364b 	.word	0x0800364b
 8003634:	0800363f 	.word	0x0800363f
 8003638:	2300      	movs	r3, #0
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e01d      	b.n	800367a <UART_SetConfig+0xe2>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e01a      	b.n	800367a <UART_SetConfig+0xe2>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e017      	b.n	800367a <UART_SetConfig+0xe2>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e014      	b.n	800367a <UART_SetConfig+0xe2>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e011      	b.n	800367a <UART_SetConfig+0xe2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a67      	ldr	r2, [pc, #412]	; (80037f8 <UART_SetConfig+0x260>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d102      	bne.n	8003666 <UART_SetConfig+0xce>
 8003660:	2300      	movs	r3, #0
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e009      	b.n	800367a <UART_SetConfig+0xe2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a64      	ldr	r2, [pc, #400]	; (80037fc <UART_SetConfig+0x264>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d102      	bne.n	8003676 <UART_SetConfig+0xde>
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e001      	b.n	800367a <UART_SetConfig+0xe2>
 8003676:	2310      	movs	r3, #16
 8003678:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003682:	d15a      	bne.n	800373a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003684:	7ffb      	ldrb	r3, [r7, #31]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d827      	bhi.n	80036da <UART_SetConfig+0x142>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0xf8>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036db 	.word	0x080036db
 80036a0:	080036cb 	.word	0x080036cb
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7ff fa2a 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80036b8:	61b8      	str	r0, [r7, #24]
        break;
 80036ba:	e013      	b.n	80036e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7ff fa48 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80036c0:	61b8      	str	r0, [r7, #24]
        break;
 80036c2:	e00f      	b.n	80036e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <UART_SetConfig+0x268>)
 80036c6:	61bb      	str	r3, [r7, #24]
        break;
 80036c8:	e00c      	b.n	80036e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7ff f9a9 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80036ce:	61b8      	str	r0, [r7, #24]
        break;
 80036d0:	e008      	b.n	80036e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e004      	b.n	80036e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77bb      	strb	r3, [r7, #30]
        break;
 80036e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d074      	beq.n	80037d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	005a      	lsls	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d916      	bls.n	8003734 <UART_SetConfig+0x19c>
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d212      	bcs.n	8003734 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b29a      	uxth	r2, r3
 8003724:	89fb      	ldrh	r3, [r7, #14]
 8003726:	4313      	orrs	r3, r2
 8003728:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	89fa      	ldrh	r2, [r7, #14]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e04f      	b.n	80037d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	77bb      	strb	r3, [r7, #30]
 8003738:	e04c      	b.n	80037d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d828      	bhi.n	8003792 <UART_SetConfig+0x1fa>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x1b0>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003775 	.word	0x08003775
 8003750:	0800377d 	.word	0x0800377d
 8003754:	08003793 	.word	0x08003793
 8003758:	08003783 	.word	0x08003783
 800375c:	08003793 	.word	0x08003793
 8003760:	08003793 	.word	0x08003793
 8003764:	08003793 	.word	0x08003793
 8003768:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7ff f9ce 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8003770:	61b8      	str	r0, [r7, #24]
        break;
 8003772:	e013      	b.n	800379c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7ff f9ec 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8003778:	61b8      	str	r0, [r7, #24]
        break;
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <UART_SetConfig+0x268>)
 800377e:	61bb      	str	r3, [r7, #24]
        break;
 8003780:	e00c      	b.n	800379c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7ff f94d 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8003786:	61b8      	str	r0, [r7, #24]
        break;
 8003788:	e008      	b.n	800379c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e004      	b.n	800379c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77bb      	strb	r3, [r7, #30]
        break;
 800379a:	bf00      	nop
    }

    if (pclk != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085a      	lsrs	r2, r3, #1
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d909      	bls.n	80037d0 <UART_SetConfig+0x238>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d205      	bcs.n	80037d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e001      	b.n	80037d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	efff69f3 	.word	0xefff69f3
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40004400 	.word	0x40004400
 80037fc:	40004800 	.word	0x40004800
 8003800:	007a1200 	.word	0x007a1200

08003804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01a      	beq.n	800391a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003902:	d10a      	bne.n	800391a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]
  }
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b098      	sub	sp, #96	; 0x60
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003958:	f7fd f9c4 	bl	8000ce4 <HAL_GetTick>
 800395c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b08      	cmp	r3, #8
 800396a:	d12e      	bne.n	80039ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003974:	2200      	movs	r2, #0
 8003976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f88c 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d021      	beq.n	80039ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399a:	653b      	str	r3, [r7, #80]	; 0x50
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e6      	bne.n	8003986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e062      	b.n	8003a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d149      	bne.n	8003a6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e0:	2200      	movs	r2, #0
 80039e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f856 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d03c      	beq.n	8003a6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
 8003a12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e6      	bne.n	80039f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a44:	61fa      	str	r2, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	617b      	str	r3, [r7, #20]
   return(result);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e011      	b.n	8003a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3758      	adds	r7, #88	; 0x58
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa8:	e049      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d045      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fd f917 	bl	8000ce4 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e048      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d031      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d110      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2208      	movs	r2, #8
 8003aee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f838 	bl	8003b66 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2208      	movs	r2, #8
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e029      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d111      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f81e 	bl	8003b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e00f      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d0a6      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b095      	sub	sp, #84	; 0x54
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e6      	bne.n	8003b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d118      	bne.n	8003c0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 0310 	bic.w	r3, r3, #16
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6979      	ldr	r1, [r7, #20]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	613b      	str	r3, [r7, #16]
   return(result);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e6      	bne.n	8003bdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c22:	bf00      	nop
 8003c24:	3754      	adds	r7, #84	; 0x54
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4d0d      	ldr	r5, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2600      	movs	r6, #0
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f000 fc8e 	bl	8004570 <_init>
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2600      	movs	r6, #0
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08004648 	.word	0x08004648
 8003c78:	08004648 	.word	0x08004648
 8003c7c:	08004648 	.word	0x08004648
 8003c80:	0800464c 	.word	0x0800464c

08003c84 <memset>:
 8003c84:	4402      	add	r2, r0
 8003c86:	4603      	mov	r3, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <siprintf>:
 8003c94:	b40e      	push	{r1, r2, r3}
 8003c96:	b500      	push	{lr}
 8003c98:	b09c      	sub	sp, #112	; 0x70
 8003c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c9c:	9002      	str	r0, [sp, #8]
 8003c9e:	9006      	str	r0, [sp, #24]
 8003ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca4:	4809      	ldr	r0, [pc, #36]	; (8003ccc <siprintf+0x38>)
 8003ca6:	9107      	str	r1, [sp, #28]
 8003ca8:	9104      	str	r1, [sp, #16]
 8003caa:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <siprintf+0x3c>)
 8003cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cb0:	9105      	str	r1, [sp, #20]
 8003cb2:	6800      	ldr	r0, [r0, #0]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	a902      	add	r1, sp, #8
 8003cb8:	f000 f868 	bl	8003d8c <_svfiprintf_r>
 8003cbc:	9b02      	ldr	r3, [sp, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	b01c      	add	sp, #112	; 0x70
 8003cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc8:	b003      	add	sp, #12
 8003cca:	4770      	bx	lr
 8003ccc:	2000000c 	.word	0x2000000c
 8003cd0:	ffff0208 	.word	0xffff0208

08003cd4 <__ssputs_r>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	688e      	ldr	r6, [r1, #8]
 8003cda:	429e      	cmp	r6, r3
 8003cdc:	4682      	mov	sl, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	461f      	mov	r7, r3
 8003ce4:	d838      	bhi.n	8003d58 <__ssputs_r+0x84>
 8003ce6:	898a      	ldrh	r2, [r1, #12]
 8003ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cec:	d032      	beq.n	8003d54 <__ssputs_r+0x80>
 8003cee:	6825      	ldr	r5, [r4, #0]
 8003cf0:	6909      	ldr	r1, [r1, #16]
 8003cf2:	eba5 0901 	sub.w	r9, r5, r1
 8003cf6:	6965      	ldr	r5, [r4, #20]
 8003cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d00:	3301      	adds	r3, #1
 8003d02:	444b      	add	r3, r9
 8003d04:	106d      	asrs	r5, r5, #1
 8003d06:	429d      	cmp	r5, r3
 8003d08:	bf38      	it	cc
 8003d0a:	461d      	movcc	r5, r3
 8003d0c:	0553      	lsls	r3, r2, #21
 8003d0e:	d531      	bpl.n	8003d74 <__ssputs_r+0xa0>
 8003d10:	4629      	mov	r1, r5
 8003d12:	f000 fb63 	bl	80043dc <_malloc_r>
 8003d16:	4606      	mov	r6, r0
 8003d18:	b950      	cbnz	r0, 8003d30 <__ssputs_r+0x5c>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	f8ca 3000 	str.w	r3, [sl]
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	6921      	ldr	r1, [r4, #16]
 8003d32:	464a      	mov	r2, r9
 8003d34:	f000 fabe 	bl	80042b4 <memcpy>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	6126      	str	r6, [r4, #16]
 8003d46:	6165      	str	r5, [r4, #20]
 8003d48:	444e      	add	r6, r9
 8003d4a:	eba5 0509 	sub.w	r5, r5, r9
 8003d4e:	6026      	str	r6, [r4, #0]
 8003d50:	60a5      	str	r5, [r4, #8]
 8003d52:	463e      	mov	r6, r7
 8003d54:	42be      	cmp	r6, r7
 8003d56:	d900      	bls.n	8003d5a <__ssputs_r+0x86>
 8003d58:	463e      	mov	r6, r7
 8003d5a:	6820      	ldr	r0, [r4, #0]
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4641      	mov	r1, r8
 8003d60:	f000 fab6 	bl	80042d0 <memmove>
 8003d64:	68a3      	ldr	r3, [r4, #8]
 8003d66:	1b9b      	subs	r3, r3, r6
 8003d68:	60a3      	str	r3, [r4, #8]
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	4433      	add	r3, r6
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	2000      	movs	r0, #0
 8003d72:	e7db      	b.n	8003d2c <__ssputs_r+0x58>
 8003d74:	462a      	mov	r2, r5
 8003d76:	f000 fba5 	bl	80044c4 <_realloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1e1      	bne.n	8003d44 <__ssputs_r+0x70>
 8003d80:	6921      	ldr	r1, [r4, #16]
 8003d82:	4650      	mov	r0, sl
 8003d84:	f000 fabe 	bl	8004304 <_free_r>
 8003d88:	e7c7      	b.n	8003d1a <__ssputs_r+0x46>
	...

08003d8c <_svfiprintf_r>:
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	4698      	mov	r8, r3
 8003d92:	898b      	ldrh	r3, [r1, #12]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	b09d      	sub	sp, #116	; 0x74
 8003d98:	4607      	mov	r7, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	d50e      	bpl.n	8003dbe <_svfiprintf_r+0x32>
 8003da0:	690b      	ldr	r3, [r1, #16]
 8003da2:	b963      	cbnz	r3, 8003dbe <_svfiprintf_r+0x32>
 8003da4:	2140      	movs	r1, #64	; 0x40
 8003da6:	f000 fb19 	bl	80043dc <_malloc_r>
 8003daa:	6028      	str	r0, [r5, #0]
 8003dac:	6128      	str	r0, [r5, #16]
 8003dae:	b920      	cbnz	r0, 8003dba <_svfiprintf_r+0x2e>
 8003db0:	230c      	movs	r3, #12
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	e0d1      	b.n	8003f5e <_svfiprintf_r+0x1d2>
 8003dba:	2340      	movs	r3, #64	; 0x40
 8003dbc:	616b      	str	r3, [r5, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dcc:	2330      	movs	r3, #48	; 0x30
 8003dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f78 <_svfiprintf_r+0x1ec>
 8003dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd6:	f04f 0901 	mov.w	r9, #1
 8003dda:	4623      	mov	r3, r4
 8003ddc:	469a      	mov	sl, r3
 8003dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de2:	b10a      	cbz	r2, 8003de8 <_svfiprintf_r+0x5c>
 8003de4:	2a25      	cmp	r2, #37	; 0x25
 8003de6:	d1f9      	bne.n	8003ddc <_svfiprintf_r+0x50>
 8003de8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dec:	d00b      	beq.n	8003e06 <_svfiprintf_r+0x7a>
 8003dee:	465b      	mov	r3, fp
 8003df0:	4622      	mov	r2, r4
 8003df2:	4629      	mov	r1, r5
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7ff ff6d 	bl	8003cd4 <__ssputs_r>
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	f000 80aa 	beq.w	8003f54 <_svfiprintf_r+0x1c8>
 8003e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e02:	445a      	add	r2, fp
 8003e04:	9209      	str	r2, [sp, #36]	; 0x24
 8003e06:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80a2 	beq.w	8003f54 <_svfiprintf_r+0x1c8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295
 8003e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1a:	f10a 0a01 	add.w	sl, sl, #1
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	9307      	str	r3, [sp, #28]
 8003e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e26:	931a      	str	r3, [sp, #104]	; 0x68
 8003e28:	4654      	mov	r4, sl
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e30:	4851      	ldr	r0, [pc, #324]	; (8003f78 <_svfiprintf_r+0x1ec>)
 8003e32:	f7fc f9d5 	bl	80001e0 <memchr>
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	b9d8      	cbnz	r0, 8003e72 <_svfiprintf_r+0xe6>
 8003e3a:	06d0      	lsls	r0, r2, #27
 8003e3c:	bf44      	itt	mi
 8003e3e:	2320      	movmi	r3, #32
 8003e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e44:	0711      	lsls	r1, r2, #28
 8003e46:	bf44      	itt	mi
 8003e48:	232b      	movmi	r3, #43	; 0x2b
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e52:	2b2a      	cmp	r3, #42	; 0x2a
 8003e54:	d015      	beq.n	8003e82 <_svfiprintf_r+0xf6>
 8003e56:	9a07      	ldr	r2, [sp, #28]
 8003e58:	4654      	mov	r4, sl
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f04f 0c0a 	mov.w	ip, #10
 8003e60:	4621      	mov	r1, r4
 8003e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e66:	3b30      	subs	r3, #48	; 0x30
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d94e      	bls.n	8003f0a <_svfiprintf_r+0x17e>
 8003e6c:	b1b0      	cbz	r0, 8003e9c <_svfiprintf_r+0x110>
 8003e6e:	9207      	str	r2, [sp, #28]
 8003e70:	e014      	b.n	8003e9c <_svfiprintf_r+0x110>
 8003e72:	eba0 0308 	sub.w	r3, r0, r8
 8003e76:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	46a2      	mov	sl, r4
 8003e80:	e7d2      	b.n	8003e28 <_svfiprintf_r+0x9c>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	1d19      	adds	r1, r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9103      	str	r1, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfbb      	ittet	lt
 8003e8e:	425b      	neglt	r3, r3
 8003e90:	f042 0202 	orrlt.w	r2, r2, #2
 8003e94:	9307      	strge	r3, [sp, #28]
 8003e96:	9307      	strlt	r3, [sp, #28]
 8003e98:	bfb8      	it	lt
 8003e9a:	9204      	strlt	r2, [sp, #16]
 8003e9c:	7823      	ldrb	r3, [r4, #0]
 8003e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea0:	d10c      	bne.n	8003ebc <_svfiprintf_r+0x130>
 8003ea2:	7863      	ldrb	r3, [r4, #1]
 8003ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea6:	d135      	bne.n	8003f14 <_svfiprintf_r+0x188>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	9203      	str	r2, [sp, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bfb8      	it	lt
 8003eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb8:	3402      	adds	r4, #2
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f88 <_svfiprintf_r+0x1fc>
 8003ec0:	7821      	ldrb	r1, [r4, #0]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f7fc f98b 	bl	80001e0 <memchr>
 8003eca:	b140      	cbz	r0, 8003ede <_svfiprintf_r+0x152>
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	eba0 000a 	sub.w	r0, r0, sl
 8003ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	4303      	orrs	r3, r0
 8003eda:	3401      	adds	r4, #1
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee2:	4826      	ldr	r0, [pc, #152]	; (8003f7c <_svfiprintf_r+0x1f0>)
 8003ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee8:	2206      	movs	r2, #6
 8003eea:	f7fc f979 	bl	80001e0 <memchr>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d038      	beq.n	8003f64 <_svfiprintf_r+0x1d8>
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <_svfiprintf_r+0x1f4>)
 8003ef4:	bb1b      	cbnz	r3, 8003f3e <_svfiprintf_r+0x1b2>
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	3307      	adds	r3, #7
 8003efa:	f023 0307 	bic.w	r3, r3, #7
 8003efe:	3308      	adds	r3, #8
 8003f00:	9303      	str	r3, [sp, #12]
 8003f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f04:	4433      	add	r3, r6
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	e767      	b.n	8003dda <_svfiprintf_r+0x4e>
 8003f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0e:	460c      	mov	r4, r1
 8003f10:	2001      	movs	r0, #1
 8003f12:	e7a5      	b.n	8003e60 <_svfiprintf_r+0xd4>
 8003f14:	2300      	movs	r3, #0
 8003f16:	3401      	adds	r4, #1
 8003f18:	9305      	str	r3, [sp, #20]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f04f 0c0a 	mov.w	ip, #10
 8003f20:	4620      	mov	r0, r4
 8003f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f26:	3a30      	subs	r2, #48	; 0x30
 8003f28:	2a09      	cmp	r2, #9
 8003f2a:	d903      	bls.n	8003f34 <_svfiprintf_r+0x1a8>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0c5      	beq.n	8003ebc <_svfiprintf_r+0x130>
 8003f30:	9105      	str	r1, [sp, #20]
 8003f32:	e7c3      	b.n	8003ebc <_svfiprintf_r+0x130>
 8003f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f38:	4604      	mov	r4, r0
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e7f0      	b.n	8003f20 <_svfiprintf_r+0x194>
 8003f3e:	ab03      	add	r3, sp, #12
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	462a      	mov	r2, r5
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <_svfiprintf_r+0x1f8>)
 8003f46:	a904      	add	r1, sp, #16
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f3af 8000 	nop.w
 8003f4e:	1c42      	adds	r2, r0, #1
 8003f50:	4606      	mov	r6, r0
 8003f52:	d1d6      	bne.n	8003f02 <_svfiprintf_r+0x176>
 8003f54:	89ab      	ldrh	r3, [r5, #12]
 8003f56:	065b      	lsls	r3, r3, #25
 8003f58:	f53f af2c 	bmi.w	8003db4 <_svfiprintf_r+0x28>
 8003f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5e:	b01d      	add	sp, #116	; 0x74
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <_svfiprintf_r+0x1f8>)
 8003f6c:	a904      	add	r1, sp, #16
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f000 f87a 	bl	8004068 <_printf_i>
 8003f74:	e7eb      	b.n	8003f4e <_svfiprintf_r+0x1c2>
 8003f76:	bf00      	nop
 8003f78:	08004614 	.word	0x08004614
 8003f7c:	0800461e 	.word	0x0800461e
 8003f80:	00000000 	.word	0x00000000
 8003f84:	08003cd5 	.word	0x08003cd5
 8003f88:	0800461a 	.word	0x0800461a

08003f8c <_printf_common>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	4616      	mov	r6, r2
 8003f92:	4699      	mov	r9, r3
 8003f94:	688a      	ldr	r2, [r1, #8]
 8003f96:	690b      	ldr	r3, [r1, #16]
 8003f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bfb8      	it	lt
 8003fa0:	4613      	movlt	r3, r2
 8003fa2:	6033      	str	r3, [r6, #0]
 8003fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa8:	4607      	mov	r7, r0
 8003faa:	460c      	mov	r4, r1
 8003fac:	b10a      	cbz	r2, 8003fb2 <_printf_common+0x26>
 8003fae:	3301      	adds	r3, #1
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0699      	lsls	r1, r3, #26
 8003fb6:	bf42      	ittt	mi
 8003fb8:	6833      	ldrmi	r3, [r6, #0]
 8003fba:	3302      	addmi	r3, #2
 8003fbc:	6033      	strmi	r3, [r6, #0]
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	f015 0506 	ands.w	r5, r5, #6
 8003fc4:	d106      	bne.n	8003fd4 <_printf_common+0x48>
 8003fc6:	f104 0a19 	add.w	sl, r4, #25
 8003fca:	68e3      	ldr	r3, [r4, #12]
 8003fcc:	6832      	ldr	r2, [r6, #0]
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	42ab      	cmp	r3, r5
 8003fd2:	dc26      	bgt.n	8004022 <_printf_common+0x96>
 8003fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd8:	1e13      	subs	r3, r2, #0
 8003fda:	6822      	ldr	r2, [r4, #0]
 8003fdc:	bf18      	it	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	0692      	lsls	r2, r2, #26
 8003fe2:	d42b      	bmi.n	800403c <_printf_common+0xb0>
 8003fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe8:	4649      	mov	r1, r9
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c0      	blx	r8
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d01e      	beq.n	8004030 <_printf_common+0xa4>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	68e5      	ldr	r5, [r4, #12]
 8003ff6:	6832      	ldr	r2, [r6, #0]
 8003ff8:	f003 0306 	and.w	r3, r3, #6
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	bf08      	it	eq
 8004000:	1aad      	subeq	r5, r5, r2
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	bf0c      	ite	eq
 8004008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800400c:	2500      	movne	r5, #0
 800400e:	4293      	cmp	r3, r2
 8004010:	bfc4      	itt	gt
 8004012:	1a9b      	subgt	r3, r3, r2
 8004014:	18ed      	addgt	r5, r5, r3
 8004016:	2600      	movs	r6, #0
 8004018:	341a      	adds	r4, #26
 800401a:	42b5      	cmp	r5, r6
 800401c:	d11a      	bne.n	8004054 <_printf_common+0xc8>
 800401e:	2000      	movs	r0, #0
 8004020:	e008      	b.n	8004034 <_printf_common+0xa8>
 8004022:	2301      	movs	r3, #1
 8004024:	4652      	mov	r2, sl
 8004026:	4649      	mov	r1, r9
 8004028:	4638      	mov	r0, r7
 800402a:	47c0      	blx	r8
 800402c:	3001      	adds	r0, #1
 800402e:	d103      	bne.n	8004038 <_printf_common+0xac>
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004038:	3501      	adds	r5, #1
 800403a:	e7c6      	b.n	8003fca <_printf_common+0x3e>
 800403c:	18e1      	adds	r1, r4, r3
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	2030      	movs	r0, #48	; 0x30
 8004042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004046:	4422      	add	r2, r4
 8004048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800404c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004050:	3302      	adds	r3, #2
 8004052:	e7c7      	b.n	8003fe4 <_printf_common+0x58>
 8004054:	2301      	movs	r3, #1
 8004056:	4622      	mov	r2, r4
 8004058:	4649      	mov	r1, r9
 800405a:	4638      	mov	r0, r7
 800405c:	47c0      	blx	r8
 800405e:	3001      	adds	r0, #1
 8004060:	d0e6      	beq.n	8004030 <_printf_common+0xa4>
 8004062:	3601      	adds	r6, #1
 8004064:	e7d9      	b.n	800401a <_printf_common+0x8e>
	...

08004068 <_printf_i>:
 8004068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	7e0f      	ldrb	r7, [r1, #24]
 800406e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004070:	2f78      	cmp	r7, #120	; 0x78
 8004072:	4691      	mov	r9, r2
 8004074:	4680      	mov	r8, r0
 8004076:	460c      	mov	r4, r1
 8004078:	469a      	mov	sl, r3
 800407a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800407e:	d807      	bhi.n	8004090 <_printf_i+0x28>
 8004080:	2f62      	cmp	r7, #98	; 0x62
 8004082:	d80a      	bhi.n	800409a <_printf_i+0x32>
 8004084:	2f00      	cmp	r7, #0
 8004086:	f000 80d8 	beq.w	800423a <_printf_i+0x1d2>
 800408a:	2f58      	cmp	r7, #88	; 0x58
 800408c:	f000 80a3 	beq.w	80041d6 <_printf_i+0x16e>
 8004090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004098:	e03a      	b.n	8004110 <_printf_i+0xa8>
 800409a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409e:	2b15      	cmp	r3, #21
 80040a0:	d8f6      	bhi.n	8004090 <_printf_i+0x28>
 80040a2:	a101      	add	r1, pc, #4	; (adr r1, 80040a8 <_printf_i+0x40>)
 80040a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a8:	08004101 	.word	0x08004101
 80040ac:	08004115 	.word	0x08004115
 80040b0:	08004091 	.word	0x08004091
 80040b4:	08004091 	.word	0x08004091
 80040b8:	08004091 	.word	0x08004091
 80040bc:	08004091 	.word	0x08004091
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004091 	.word	0x08004091
 80040c8:	08004091 	.word	0x08004091
 80040cc:	08004091 	.word	0x08004091
 80040d0:	08004091 	.word	0x08004091
 80040d4:	08004221 	.word	0x08004221
 80040d8:	08004145 	.word	0x08004145
 80040dc:	08004203 	.word	0x08004203
 80040e0:	08004091 	.word	0x08004091
 80040e4:	08004091 	.word	0x08004091
 80040e8:	08004243 	.word	0x08004243
 80040ec:	08004091 	.word	0x08004091
 80040f0:	08004145 	.word	0x08004145
 80040f4:	08004091 	.word	0x08004091
 80040f8:	08004091 	.word	0x08004091
 80040fc:	0800420b 	.word	0x0800420b
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	1d1a      	adds	r2, r3, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	602a      	str	r2, [r5, #0]
 8004108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800410c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004110:	2301      	movs	r3, #1
 8004112:	e0a3      	b.n	800425c <_printf_i+0x1f4>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	6829      	ldr	r1, [r5, #0]
 8004118:	0606      	lsls	r6, r0, #24
 800411a:	f101 0304 	add.w	r3, r1, #4
 800411e:	d50a      	bpl.n	8004136 <_printf_i+0xce>
 8004120:	680e      	ldr	r6, [r1, #0]
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	2e00      	cmp	r6, #0
 8004126:	da03      	bge.n	8004130 <_printf_i+0xc8>
 8004128:	232d      	movs	r3, #45	; 0x2d
 800412a:	4276      	negs	r6, r6
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004130:	485e      	ldr	r0, [pc, #376]	; (80042ac <_printf_i+0x244>)
 8004132:	230a      	movs	r3, #10
 8004134:	e019      	b.n	800416a <_printf_i+0x102>
 8004136:	680e      	ldr	r6, [r1, #0]
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800413e:	bf18      	it	ne
 8004140:	b236      	sxthne	r6, r6
 8004142:	e7ef      	b.n	8004124 <_printf_i+0xbc>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	1d19      	adds	r1, r3, #4
 800414a:	6029      	str	r1, [r5, #0]
 800414c:	0601      	lsls	r1, r0, #24
 800414e:	d501      	bpl.n	8004154 <_printf_i+0xec>
 8004150:	681e      	ldr	r6, [r3, #0]
 8004152:	e002      	b.n	800415a <_printf_i+0xf2>
 8004154:	0646      	lsls	r6, r0, #25
 8004156:	d5fb      	bpl.n	8004150 <_printf_i+0xe8>
 8004158:	881e      	ldrh	r6, [r3, #0]
 800415a:	4854      	ldr	r0, [pc, #336]	; (80042ac <_printf_i+0x244>)
 800415c:	2f6f      	cmp	r7, #111	; 0x6f
 800415e:	bf0c      	ite	eq
 8004160:	2308      	moveq	r3, #8
 8004162:	230a      	movne	r3, #10
 8004164:	2100      	movs	r1, #0
 8004166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416a:	6865      	ldr	r5, [r4, #4]
 800416c:	60a5      	str	r5, [r4, #8]
 800416e:	2d00      	cmp	r5, #0
 8004170:	bfa2      	ittt	ge
 8004172:	6821      	ldrge	r1, [r4, #0]
 8004174:	f021 0104 	bicge.w	r1, r1, #4
 8004178:	6021      	strge	r1, [r4, #0]
 800417a:	b90e      	cbnz	r6, 8004180 <_printf_i+0x118>
 800417c:	2d00      	cmp	r5, #0
 800417e:	d04d      	beq.n	800421c <_printf_i+0x1b4>
 8004180:	4615      	mov	r5, r2
 8004182:	fbb6 f1f3 	udiv	r1, r6, r3
 8004186:	fb03 6711 	mls	r7, r3, r1, r6
 800418a:	5dc7      	ldrb	r7, [r0, r7]
 800418c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004190:	4637      	mov	r7, r6
 8004192:	42bb      	cmp	r3, r7
 8004194:	460e      	mov	r6, r1
 8004196:	d9f4      	bls.n	8004182 <_printf_i+0x11a>
 8004198:	2b08      	cmp	r3, #8
 800419a:	d10b      	bne.n	80041b4 <_printf_i+0x14c>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	07de      	lsls	r6, r3, #31
 80041a0:	d508      	bpl.n	80041b4 <_printf_i+0x14c>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	6861      	ldr	r1, [r4, #4]
 80041a6:	4299      	cmp	r1, r3
 80041a8:	bfde      	ittt	le
 80041aa:	2330      	movle	r3, #48	; 0x30
 80041ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041b4:	1b52      	subs	r2, r2, r5
 80041b6:	6122      	str	r2, [r4, #16]
 80041b8:	f8cd a000 	str.w	sl, [sp]
 80041bc:	464b      	mov	r3, r9
 80041be:	aa03      	add	r2, sp, #12
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7ff fee2 	bl	8003f8c <_printf_common>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d14c      	bne.n	8004266 <_printf_i+0x1fe>
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	b004      	add	sp, #16
 80041d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d6:	4835      	ldr	r0, [pc, #212]	; (80042ac <_printf_i+0x244>)
 80041d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041dc:	6829      	ldr	r1, [r5, #0]
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041e4:	6029      	str	r1, [r5, #0]
 80041e6:	061d      	lsls	r5, r3, #24
 80041e8:	d514      	bpl.n	8004214 <_printf_i+0x1ac>
 80041ea:	07df      	lsls	r7, r3, #31
 80041ec:	bf44      	itt	mi
 80041ee:	f043 0320 	orrmi.w	r3, r3, #32
 80041f2:	6023      	strmi	r3, [r4, #0]
 80041f4:	b91e      	cbnz	r6, 80041fe <_printf_i+0x196>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	f023 0320 	bic.w	r3, r3, #32
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	2310      	movs	r3, #16
 8004200:	e7b0      	b.n	8004164 <_printf_i+0xfc>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f043 0320 	orr.w	r3, r3, #32
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	2378      	movs	r3, #120	; 0x78
 800420c:	4828      	ldr	r0, [pc, #160]	; (80042b0 <_printf_i+0x248>)
 800420e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004212:	e7e3      	b.n	80041dc <_printf_i+0x174>
 8004214:	0659      	lsls	r1, r3, #25
 8004216:	bf48      	it	mi
 8004218:	b2b6      	uxthmi	r6, r6
 800421a:	e7e6      	b.n	80041ea <_printf_i+0x182>
 800421c:	4615      	mov	r5, r2
 800421e:	e7bb      	b.n	8004198 <_printf_i+0x130>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6826      	ldr	r6, [r4, #0]
 8004224:	6961      	ldr	r1, [r4, #20]
 8004226:	1d18      	adds	r0, r3, #4
 8004228:	6028      	str	r0, [r5, #0]
 800422a:	0635      	lsls	r5, r6, #24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	d501      	bpl.n	8004234 <_printf_i+0x1cc>
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	e002      	b.n	800423a <_printf_i+0x1d2>
 8004234:	0670      	lsls	r0, r6, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0x1c8>
 8004238:	8019      	strh	r1, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	4615      	mov	r5, r2
 8004240:	e7ba      	b.n	80041b8 <_printf_i+0x150>
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	602a      	str	r2, [r5, #0]
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	2100      	movs	r1, #0
 800424e:	4628      	mov	r0, r5
 8004250:	f7fb ffc6 	bl	80001e0 <memchr>
 8004254:	b108      	cbz	r0, 800425a <_printf_i+0x1f2>
 8004256:	1b40      	subs	r0, r0, r5
 8004258:	6060      	str	r0, [r4, #4]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	2300      	movs	r3, #0
 8004260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004264:	e7a8      	b.n	80041b8 <_printf_i+0x150>
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	462a      	mov	r2, r5
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	47d0      	blx	sl
 8004270:	3001      	adds	r0, #1
 8004272:	d0ab      	beq.n	80041cc <_printf_i+0x164>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	079b      	lsls	r3, r3, #30
 8004278:	d413      	bmi.n	80042a2 <_printf_i+0x23a>
 800427a:	68e0      	ldr	r0, [r4, #12]
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	4298      	cmp	r0, r3
 8004280:	bfb8      	it	lt
 8004282:	4618      	movlt	r0, r3
 8004284:	e7a4      	b.n	80041d0 <_printf_i+0x168>
 8004286:	2301      	movs	r3, #1
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	47d0      	blx	sl
 8004290:	3001      	adds	r0, #1
 8004292:	d09b      	beq.n	80041cc <_printf_i+0x164>
 8004294:	3501      	adds	r5, #1
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	1a5b      	subs	r3, r3, r1
 800429c:	42ab      	cmp	r3, r5
 800429e:	dcf2      	bgt.n	8004286 <_printf_i+0x21e>
 80042a0:	e7eb      	b.n	800427a <_printf_i+0x212>
 80042a2:	2500      	movs	r5, #0
 80042a4:	f104 0619 	add.w	r6, r4, #25
 80042a8:	e7f5      	b.n	8004296 <_printf_i+0x22e>
 80042aa:	bf00      	nop
 80042ac:	08004625 	.word	0x08004625
 80042b0:	08004636 	.word	0x08004636

080042b4 <memcpy>:
 80042b4:	440a      	add	r2, r1
 80042b6:	4291      	cmp	r1, r2
 80042b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042bc:	d100      	bne.n	80042c0 <memcpy+0xc>
 80042be:	4770      	bx	lr
 80042c0:	b510      	push	{r4, lr}
 80042c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ca:	4291      	cmp	r1, r2
 80042cc:	d1f9      	bne.n	80042c2 <memcpy+0xe>
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <memmove>:
 80042d0:	4288      	cmp	r0, r1
 80042d2:	b510      	push	{r4, lr}
 80042d4:	eb01 0402 	add.w	r4, r1, r2
 80042d8:	d902      	bls.n	80042e0 <memmove+0x10>
 80042da:	4284      	cmp	r4, r0
 80042dc:	4623      	mov	r3, r4
 80042de:	d807      	bhi.n	80042f0 <memmove+0x20>
 80042e0:	1e43      	subs	r3, r0, #1
 80042e2:	42a1      	cmp	r1, r4
 80042e4:	d008      	beq.n	80042f8 <memmove+0x28>
 80042e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ee:	e7f8      	b.n	80042e2 <memmove+0x12>
 80042f0:	4402      	add	r2, r0
 80042f2:	4601      	mov	r1, r0
 80042f4:	428a      	cmp	r2, r1
 80042f6:	d100      	bne.n	80042fa <memmove+0x2a>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004302:	e7f7      	b.n	80042f4 <memmove+0x24>

08004304 <_free_r>:
 8004304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004306:	2900      	cmp	r1, #0
 8004308:	d044      	beq.n	8004394 <_free_r+0x90>
 800430a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430e:	9001      	str	r0, [sp, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f1a1 0404 	sub.w	r4, r1, #4
 8004316:	bfb8      	it	lt
 8004318:	18e4      	addlt	r4, r4, r3
 800431a:	f000 f913 	bl	8004544 <__malloc_lock>
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <_free_r+0x94>)
 8004320:	9801      	ldr	r0, [sp, #4]
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	b933      	cbnz	r3, 8004334 <_free_r+0x30>
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	6014      	str	r4, [r2, #0]
 800432a:	b003      	add	sp, #12
 800432c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004330:	f000 b90e 	b.w	8004550 <__malloc_unlock>
 8004334:	42a3      	cmp	r3, r4
 8004336:	d908      	bls.n	800434a <_free_r+0x46>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1961      	adds	r1, r4, r5
 800433c:	428b      	cmp	r3, r1
 800433e:	bf01      	itttt	eq
 8004340:	6819      	ldreq	r1, [r3, #0]
 8004342:	685b      	ldreq	r3, [r3, #4]
 8004344:	1949      	addeq	r1, r1, r5
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	e7ed      	b.n	8004326 <_free_r+0x22>
 800434a:	461a      	mov	r2, r3
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	b10b      	cbz	r3, 8004354 <_free_r+0x50>
 8004350:	42a3      	cmp	r3, r4
 8004352:	d9fa      	bls.n	800434a <_free_r+0x46>
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	1855      	adds	r5, r2, r1
 8004358:	42a5      	cmp	r5, r4
 800435a:	d10b      	bne.n	8004374 <_free_r+0x70>
 800435c:	6824      	ldr	r4, [r4, #0]
 800435e:	4421      	add	r1, r4
 8004360:	1854      	adds	r4, r2, r1
 8004362:	42a3      	cmp	r3, r4
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	d1e0      	bne.n	800432a <_free_r+0x26>
 8004368:	681c      	ldr	r4, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6053      	str	r3, [r2, #4]
 800436e:	4421      	add	r1, r4
 8004370:	6011      	str	r1, [r2, #0]
 8004372:	e7da      	b.n	800432a <_free_r+0x26>
 8004374:	d902      	bls.n	800437c <_free_r+0x78>
 8004376:	230c      	movs	r3, #12
 8004378:	6003      	str	r3, [r0, #0]
 800437a:	e7d6      	b.n	800432a <_free_r+0x26>
 800437c:	6825      	ldr	r5, [r4, #0]
 800437e:	1961      	adds	r1, r4, r5
 8004380:	428b      	cmp	r3, r1
 8004382:	bf04      	itt	eq
 8004384:	6819      	ldreq	r1, [r3, #0]
 8004386:	685b      	ldreq	r3, [r3, #4]
 8004388:	6063      	str	r3, [r4, #4]
 800438a:	bf04      	itt	eq
 800438c:	1949      	addeq	r1, r1, r5
 800438e:	6021      	streq	r1, [r4, #0]
 8004390:	6054      	str	r4, [r2, #4]
 8004392:	e7ca      	b.n	800432a <_free_r+0x26>
 8004394:	b003      	add	sp, #12
 8004396:	bd30      	pop	{r4, r5, pc}
 8004398:	20000270 	.word	0x20000270

0800439c <sbrk_aligned>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4e0e      	ldr	r6, [pc, #56]	; (80043d8 <sbrk_aligned+0x3c>)
 80043a0:	460c      	mov	r4, r1
 80043a2:	6831      	ldr	r1, [r6, #0]
 80043a4:	4605      	mov	r5, r0
 80043a6:	b911      	cbnz	r1, 80043ae <sbrk_aligned+0x12>
 80043a8:	f000 f8bc 	bl	8004524 <_sbrk_r>
 80043ac:	6030      	str	r0, [r6, #0]
 80043ae:	4621      	mov	r1, r4
 80043b0:	4628      	mov	r0, r5
 80043b2:	f000 f8b7 	bl	8004524 <_sbrk_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d00a      	beq.n	80043d0 <sbrk_aligned+0x34>
 80043ba:	1cc4      	adds	r4, r0, #3
 80043bc:	f024 0403 	bic.w	r4, r4, #3
 80043c0:	42a0      	cmp	r0, r4
 80043c2:	d007      	beq.n	80043d4 <sbrk_aligned+0x38>
 80043c4:	1a21      	subs	r1, r4, r0
 80043c6:	4628      	mov	r0, r5
 80043c8:	f000 f8ac 	bl	8004524 <_sbrk_r>
 80043cc:	3001      	adds	r0, #1
 80043ce:	d101      	bne.n	80043d4 <sbrk_aligned+0x38>
 80043d0:	f04f 34ff 	mov.w	r4, #4294967295
 80043d4:	4620      	mov	r0, r4
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	20000274 	.word	0x20000274

080043dc <_malloc_r>:
 80043dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	1ccd      	adds	r5, r1, #3
 80043e2:	f025 0503 	bic.w	r5, r5, #3
 80043e6:	3508      	adds	r5, #8
 80043e8:	2d0c      	cmp	r5, #12
 80043ea:	bf38      	it	cc
 80043ec:	250c      	movcc	r5, #12
 80043ee:	2d00      	cmp	r5, #0
 80043f0:	4607      	mov	r7, r0
 80043f2:	db01      	blt.n	80043f8 <_malloc_r+0x1c>
 80043f4:	42a9      	cmp	r1, r5
 80043f6:	d905      	bls.n	8004404 <_malloc_r+0x28>
 80043f8:	230c      	movs	r3, #12
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	2600      	movs	r6, #0
 80043fe:	4630      	mov	r0, r6
 8004400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004404:	4e2e      	ldr	r6, [pc, #184]	; (80044c0 <_malloc_r+0xe4>)
 8004406:	f000 f89d 	bl	8004544 <__malloc_lock>
 800440a:	6833      	ldr	r3, [r6, #0]
 800440c:	461c      	mov	r4, r3
 800440e:	bb34      	cbnz	r4, 800445e <_malloc_r+0x82>
 8004410:	4629      	mov	r1, r5
 8004412:	4638      	mov	r0, r7
 8004414:	f7ff ffc2 	bl	800439c <sbrk_aligned>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	4604      	mov	r4, r0
 800441c:	d14d      	bne.n	80044ba <_malloc_r+0xde>
 800441e:	6834      	ldr	r4, [r6, #0]
 8004420:	4626      	mov	r6, r4
 8004422:	2e00      	cmp	r6, #0
 8004424:	d140      	bne.n	80044a8 <_malloc_r+0xcc>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	4631      	mov	r1, r6
 800442a:	4638      	mov	r0, r7
 800442c:	eb04 0803 	add.w	r8, r4, r3
 8004430:	f000 f878 	bl	8004524 <_sbrk_r>
 8004434:	4580      	cmp	r8, r0
 8004436:	d13a      	bne.n	80044ae <_malloc_r+0xd2>
 8004438:	6821      	ldr	r1, [r4, #0]
 800443a:	3503      	adds	r5, #3
 800443c:	1a6d      	subs	r5, r5, r1
 800443e:	f025 0503 	bic.w	r5, r5, #3
 8004442:	3508      	adds	r5, #8
 8004444:	2d0c      	cmp	r5, #12
 8004446:	bf38      	it	cc
 8004448:	250c      	movcc	r5, #12
 800444a:	4629      	mov	r1, r5
 800444c:	4638      	mov	r0, r7
 800444e:	f7ff ffa5 	bl	800439c <sbrk_aligned>
 8004452:	3001      	adds	r0, #1
 8004454:	d02b      	beq.n	80044ae <_malloc_r+0xd2>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	442b      	add	r3, r5
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	e00e      	b.n	800447c <_malloc_r+0xa0>
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	1b52      	subs	r2, r2, r5
 8004462:	d41e      	bmi.n	80044a2 <_malloc_r+0xc6>
 8004464:	2a0b      	cmp	r2, #11
 8004466:	d916      	bls.n	8004496 <_malloc_r+0xba>
 8004468:	1961      	adds	r1, r4, r5
 800446a:	42a3      	cmp	r3, r4
 800446c:	6025      	str	r5, [r4, #0]
 800446e:	bf18      	it	ne
 8004470:	6059      	strne	r1, [r3, #4]
 8004472:	6863      	ldr	r3, [r4, #4]
 8004474:	bf08      	it	eq
 8004476:	6031      	streq	r1, [r6, #0]
 8004478:	5162      	str	r2, [r4, r5]
 800447a:	604b      	str	r3, [r1, #4]
 800447c:	4638      	mov	r0, r7
 800447e:	f104 060b 	add.w	r6, r4, #11
 8004482:	f000 f865 	bl	8004550 <__malloc_unlock>
 8004486:	f026 0607 	bic.w	r6, r6, #7
 800448a:	1d23      	adds	r3, r4, #4
 800448c:	1af2      	subs	r2, r6, r3
 800448e:	d0b6      	beq.n	80043fe <_malloc_r+0x22>
 8004490:	1b9b      	subs	r3, r3, r6
 8004492:	50a3      	str	r3, [r4, r2]
 8004494:	e7b3      	b.n	80043fe <_malloc_r+0x22>
 8004496:	6862      	ldr	r2, [r4, #4]
 8004498:	42a3      	cmp	r3, r4
 800449a:	bf0c      	ite	eq
 800449c:	6032      	streq	r2, [r6, #0]
 800449e:	605a      	strne	r2, [r3, #4]
 80044a0:	e7ec      	b.n	800447c <_malloc_r+0xa0>
 80044a2:	4623      	mov	r3, r4
 80044a4:	6864      	ldr	r4, [r4, #4]
 80044a6:	e7b2      	b.n	800440e <_malloc_r+0x32>
 80044a8:	4634      	mov	r4, r6
 80044aa:	6876      	ldr	r6, [r6, #4]
 80044ac:	e7b9      	b.n	8004422 <_malloc_r+0x46>
 80044ae:	230c      	movs	r3, #12
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4638      	mov	r0, r7
 80044b4:	f000 f84c 	bl	8004550 <__malloc_unlock>
 80044b8:	e7a1      	b.n	80043fe <_malloc_r+0x22>
 80044ba:	6025      	str	r5, [r4, #0]
 80044bc:	e7de      	b.n	800447c <_malloc_r+0xa0>
 80044be:	bf00      	nop
 80044c0:	20000270 	.word	0x20000270

080044c4 <_realloc_r>:
 80044c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c8:	4680      	mov	r8, r0
 80044ca:	4614      	mov	r4, r2
 80044cc:	460e      	mov	r6, r1
 80044ce:	b921      	cbnz	r1, 80044da <_realloc_r+0x16>
 80044d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	4611      	mov	r1, r2
 80044d6:	f7ff bf81 	b.w	80043dc <_malloc_r>
 80044da:	b92a      	cbnz	r2, 80044e8 <_realloc_r+0x24>
 80044dc:	f7ff ff12 	bl	8004304 <_free_r>
 80044e0:	4625      	mov	r5, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e8:	f000 f838 	bl	800455c <_malloc_usable_size_r>
 80044ec:	4284      	cmp	r4, r0
 80044ee:	4607      	mov	r7, r0
 80044f0:	d802      	bhi.n	80044f8 <_realloc_r+0x34>
 80044f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044f6:	d812      	bhi.n	800451e <_realloc_r+0x5a>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff ff6e 	bl	80043dc <_malloc_r>
 8004500:	4605      	mov	r5, r0
 8004502:	2800      	cmp	r0, #0
 8004504:	d0ed      	beq.n	80044e2 <_realloc_r+0x1e>
 8004506:	42bc      	cmp	r4, r7
 8004508:	4622      	mov	r2, r4
 800450a:	4631      	mov	r1, r6
 800450c:	bf28      	it	cs
 800450e:	463a      	movcs	r2, r7
 8004510:	f7ff fed0 	bl	80042b4 <memcpy>
 8004514:	4631      	mov	r1, r6
 8004516:	4640      	mov	r0, r8
 8004518:	f7ff fef4 	bl	8004304 <_free_r>
 800451c:	e7e1      	b.n	80044e2 <_realloc_r+0x1e>
 800451e:	4635      	mov	r5, r6
 8004520:	e7df      	b.n	80044e2 <_realloc_r+0x1e>
	...

08004524 <_sbrk_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_sbrk_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fb0c 	bl	8000b4c <_sbrk>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_sbrk_r+0x1a>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_sbrk_r+0x1a>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	20000278 	.word	0x20000278

08004544 <__malloc_lock>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__malloc_lock+0x8>)
 8004546:	f000 b811 	b.w	800456c <__retarget_lock_acquire_recursive>
 800454a:	bf00      	nop
 800454c:	2000027c 	.word	0x2000027c

08004550 <__malloc_unlock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_unlock+0x8>)
 8004552:	f000 b80c 	b.w	800456e <__retarget_lock_release_recursive>
 8004556:	bf00      	nop
 8004558:	2000027c 	.word	0x2000027c

0800455c <_malloc_usable_size_r>:
 800455c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004560:	1f18      	subs	r0, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	bfbc      	itt	lt
 8004566:	580b      	ldrlt	r3, [r1, r0]
 8004568:	18c0      	addlt	r0, r0, r3
 800456a:	4770      	bx	lr

0800456c <__retarget_lock_acquire_recursive>:
 800456c:	4770      	bx	lr

0800456e <__retarget_lock_release_recursive>:
 800456e:	4770      	bx	lr

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
